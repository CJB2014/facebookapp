excess(e, x, y)
x - eff(e) * x
1/eff(e) * y -y
me <- mea(x,y)
excess(me)
install.packages('nnet')
shiny::runApp('code_repo/rewardeR')
library(lpSolveAPI)
lpmodel <- make.lp(nrow = 6 , ncol = 2)
lpmodel
train<-data.frame(wagon=c('w1','w2','w3'), weightcapacity=c(10,8,12), spacecapacity=c(5000,4000,8000))
cargo<-data.frame(type=c('c1','c2','c3','c4'), available=c(18,10,5,20), volume=c(400,300,200,500),profit=c(2000,2500,5000,3500))
lpmodel<-make.lp(2*NROW(train)+NROW(cargo),12)
lpmodel
column<-0
row<-0
for(wg in train$wagon){
row<-row+1
for(type in seq(1,NROW(cargo$type))){
column<-column+1
set.column(lpmodel,column,c(1, cargo[type,'volume'],1), indices=c(row,NROW(train)+row, NROW(train)*2+type))
}}
#set rhs weight constraints
set.constr.value(lpmodel, rhs=train$weightcapacity, constraints=seq(1,NROW(train)))
#set rhs volume constraints
set.constr.value(lpmodel, rhs=train$spacecapacity, constraints=seq(NROW(train)+1,NROW(train)*2))
#set rhs volume constraints
set.constr.value(lpmodel, rhs=cargo$available, constraints=seq(NROW(train)*2+1,NROW(train)*2+NROW(cargo)))
#set objective coefficients
set.objfn(lpmodel, rep(cargo$profit,NROW(train)))
#set objective direction
lp.control(lpmodel,sense='max')
#I in order to be able to visually check the model, I find it useful to write the model to a text file
write.lp(lpmodel,'model.lp',type='lp')
lpmodel
summary(lpmodel)
lpmodel <- make.lp(nrow = 6 , ncol = 6)
lpmodel
set.objfn(lpmodel, c(1,2,3,4,5,6))
library(shiny)
library(shinythemes)
library(shinyjs)
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
dat <- c()
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
save_data('aaa')
dat <- reactive({dat <- input[['name']]})
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
Sys.time()
as.character(Sys.time())
runApp('code_repo/New folder')
runApp('code_repo/New folder')
str_sub(as.character(Sys.time())," ","")
Sys.time())
Sys.time()
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
runApp('code_repo/New folder')
shiny::runApp('code_repo/rwd2')
runApp('code_repo/rwd2')
shiny::runApp('code_repo/rwd2')
shiny::runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
View(m1)
runApp('code_repo/Pointer')
list_file <- dir(pattern = "*_data.csv", full.names = T)
#list_file <- list.files(path = './data', pattern = "*_data.csv",full.names = T)
responses <- lapply(list_file, read.csv, header = T, sep = ',', stringsAsFactors = F )
responses <- do.call(rbind, responses)
list_file1 <- str_replace(list_file,'./','' )
list_file1 <- str_replace(list_file1,'_data.csv','' )
list_file1 <- as.Date(as.POSIXct(as.numeric(list_file1), origin = '1970-01-01'))
list_file1 <- list_file1 -7
responses$CALENDAR_DATE <- list_file1
responses <- join_all(list(responses, date_data),by = "CALENDAR_DATE", type = 'inner', match = 'all' )
lifetime <- read.csv('lifetime.csv', header = TRUE, sep = ',', stringsAsFactors = F)
#-------------------------------------------------------------------------------------------#
# analytics tab
#-------------------------------------------------------------------------------------------#
##extract the data
new_giver <- rep(responses$username, 4)
new_name <- c(responses$name1, responses$name2, responses$name3, responses$name4)
new_points <- c(responses$points1, responses$points2, responses$points3, responses$points4)
new_reasons <- c(responses$reason1, responses$reason2, responses$reason3, responses$reason4)
new_comments <- c(responses$comment1, responses$comment2, responses$comment3, responses$comment4)
new_period <- rep(responses$FIN_PERIOD_NO, 4)
new_wop <- rep(responses$week_of_period, 4)
##create a long df instead of wide
res <- as.data.frame(cbind(new_giver,new_name,new_points,new_reasons,new_comments,new_period, new_wop), stringsAsFactors = F)
res$new_points <- as.integer(res$new_points)
## bring back lifetime data
res <- rbind(res, lifetime)
#-current week -----------------------------------------------------------------------------#
current_week <- date_data[date_data$CALENDAR_DATE==(Sys.Date()-7),6]
current_period <- date_data[date_data$CALENDAR_DATE==(Sys.Date()-7),3]
##aggreg for total point per receiver
t1 <- ddply(res, c("new_period", "new_wop","new_name"), summarise, points = sum(new_points))
t1 <- t1[complete.cases(t1),]
t1 <- t1[t1$new_period == current_period & t1$new_wop ==current_week,]
#-current period ---------------------------------------------------------------------------#
p1 <- ddply(res, c('new_period', 'new_name'), summarise , points =sum(new_points))
p1_2 <- p1[p1$new_period == current_period,]
p1_2 <- p1_2[complete.cases(p1_2),]
# last 3 periods ----------------------------------------------------------------------------#
m1 <- ddply(res,c('new_name'), summarise , points = sum(new_points))
View(m1)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
View(m1)
m1 <- m1[complete.cases(m1),]
runApp('code_repo/Pointer')
m2 <- as.data.frame(table(res$new_reasons))
View(m2)
m2$percent <- round(m2$Freq/sum(m2$Freq),2)*100
View(m2)
runApp('code_repo/Pointer')
View(res)
par2 <- round((length(unique(res[res$new_period==current_period,1]))/length(team)),2)*100
unique(res[res$new_period==current_period,1])
par3 <- round((length(unique(res[,1]))/length(team)),2)*100
par3 <- round((length(unique(res[,1])-2)/length(team)),2)*100
par3 <- round(((length(unique(res[,1]))-2)/length(team)),2)*100
View(res)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
library(wordcloud)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
View(t1)
View(p1)
View(p1_2)
View(t1)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
'Clemens' %in% team
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
team <- c('Clemens','Ellen', 'Joe','Harriet','Scott','Sean','Tim','Clemence','Ariful','Nick','Alexander',
'Danis', 'Andre','Lucien','Chris','Abhishek','Theo','Constantinos','Nisha'
,'Laura'
,'Jack'
)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
check1 <- input$yourname %in% team[-'None']
team[-'None']
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
shiny::runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
shiny::runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
View(nopoint)
View(winner)
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
runApp('code_repo/Pointer')
setwd('C:/Users/Clemence.Burnichon/Documents/AGRICULTURE/CHICKEN SPRINT/SQL_data_extract')
library(stringr)
library(plyr)
dat <- read.csv('sample.csv', header = F, sep=',', stringsAsFactors = F)
View(dat)
names(dat) <- c('cust_id' , 'sku', 'sku_desc','sku_key','quantity','date','trans_id','rank','count_sku')
dat$sku <- as.integer(dat$sku)
View(dat)
install.packages("taRifx")
library(taRifx)
dat$cust_shift <- shift(dat$cust_id, pad = T)
dat$sku_shift <- shift(dat$sku, pad = T)
dat$rank <- shift(dat$rank,pad = T)
View(dat)
dat$rank <- shift(dat$rank,pad = T)
setwd('C:/Users/Clemence.Burnichon/Documents/AGRICULTURE/CHICKEN SPRINT/SQL_data_extract')
library(stringr)
library(plyr)
library(taRifx)
dat <- read.csv('sample.csv', header = F, sep=',', stringsAsFactors = F)
#dat[1,1] <- str_replace(dat[1,1],'ï»¿','')
names(dat) <- c('cust_id' , 'sku', 'sku_desc','sku_key','quantity','date','trans_id','rank','count_sku')
dat$sku <- as.integer(dat$sku)
#--------------------------------------------------------------------------------------------------------------
# create lag data
#--------------------------------------------------------------------------------------------------------------
dat$cust_shift <- shift(dat$cust_id, pad = T)
dat$sku_shift <- shift(dat$sku, pad = T)
dat$rank_shift <- shift(dat$rank,pad = T)
names(dat)
comp_previous <- function(data){
if (data[,1]==data[,10] & data[,2]==data[,11] & data[,8]==data[,12]){
data[,13] <- FALSE
}else {
data[,13]<- TRUE}
}
comp_previous(dat)
dat <- apply(dat,1,comp_previous)
View(dat)
comp_previous <- function(){
if (dat[,1]==dat[,10] & dat[,2]==dat[,11] & dat[,8]==dat[,12]){
dat$comp <- FALSE
}else {
dat$comp<- TRUE}
}
dat <- apply(dat,1,comp_previous)
dat$id_comp <- ifelse(dat$cust_id==dat$cust_shift,1,0)
dat$sku_comp <- ifelse(dat$sku==dat$sku_shift,1,0)
dat$rank_comp <- ifelse(dat$rank == dat$rank_shift-1,1,0)
View(dat)
dat$sum_comp <- dat$id_comp + dat$sku_comp + dat$rank_comp
setwd('C:/Users/Clemence.Burnichon/Documents/AGRICULTURE/CHICKEN SPRINT/SQL_data_extract')
library(stringr)
library(plyr)
library(taRifx)
dat <- read.csv('sample.csv', header = F, sep=',', stringsAsFactors = F)
names(dat) <- c('cust_id' , 'sku', 'sku_desc','sku_key','quantity','date','trans_id','rank','count_sku')
dat <- dat[order(dat$cust_id,dat$rank),]
dat <- read.csv('sample.csv', header = F, sep=',', stringsAsFactors = F)
names(dat) <- c('cust_id' , 'sku', 'sku_desc','sku_key','quantity','date','trans_id','rank','count_sku')
dat$cust_shift <- shift(dat$cust_id, pad = T)
dat$sku_shift <- shift(dat$sku, pad = T)
dat$rank_shift <- shift(dat$rank,pad = T)
dat$comp_previous <- ifelse(dat$cust_id==dat$cust_shift & dat$sku!=dat$sku_shift & dat$rank == dat$rank_shift-1,TRUE,FALSE)
switching_pair <- ifelse(dat$comp_previous == TRUE, paste(dat$sku,dat$sku_shift,sep = '/'))
switching_pair <- ifelse(dat$comp_previous == TRUE, paste(dat$sku,dat$sku_shift,sep = '/'),NA)
switching_pair <- as.data.frame(ifelse(dat$comp_previous == TRUE, paste(dat$sku,dat$sku_shift,sep = '/'),NA),stringsAsFactors = F)
View(switching_pair)
names(switching_pair) <- 'switching_pairs'
ss <- t(as.data.frame(strsplit(switching_pairs$switching_pairs,'/')))
ss <- t(as.data.frame(strsplit(switching_pair$switching_pairs,'/')))
switching_pairs$sku1 <- ss[,1]
switching_pairs$sku2 <- ss[,2]
switching_pair <- as.data.frame(ifelse(dat$comp_previous == TRUE, paste(dat$sku,dat$sku_shift,sep = '/'),NA),stringsAsFactors = F)
names(switching_pair) <- 'switching_pairs'
switching_pairs <- switching_pairs[complete.cases(switching_pairs),]
names(switching_pair) <- 'switching_pairs'
ss <- t(as.data.frame(strsplit(switching_pair$switching_pairs,'/')))
switching_pairs$sku1 <- ss[,1]
switching_pairs$sku2 <- ss[,2]
switching_pairs <- as.data.frame(ifelse(dat$comp_previous == TRUE, paste(dat$sku,dat$sku_shift,sep = '/'),NA),stringsAsFactors = F)
names(switching_pairs) <- 'switching_pairs'
ss <- t(as.data.frame(strsplit(switching_pairs$switching_pairs,'/')))
switching_pairs$sku1 <- ss[,1]
switching_pairs$sku2 <- ss[,2]
switching_pairs <- switching_pairs[complete.cases(switching_pairs),]
details <- read.csv('sku_details.csv', header= T, sep=',')
segment1 <- details[,c(3,5,7,8)]
names(segment1) <- c('cat1','segment1','sku1','sku_desc1')
segment2 <- details[,c(3,5,7,8)]
names(segment2) <- c('cat2','segment2','sku2','sku_desc2')
switching_pairs <- join_all(list(switching_pairs,segment1), by = 'sku1', type = 'inner', match = 'all')
switching_pairs <- join_all(list(switching_pairs,segment2), by = 'sku2', type = 'inner', match = 'all')
#--------------------------------------------------------------------------------------------------------------
# calculate switching fraction
#--------------------------------------------------------------------------------------------------------------
##from
switch_from <- as.data.frame(table(switching_pairs$sku1),stringsAsFactors = F)
names(switch_from) <- c('sku','count')
switch_from <- join_all(list(switch_from, sku_trans), by = 'sku', type = 'inner', match = 'all')
switch_from$switching_fraction_from <- round(switch_from$count/switch_from$count_of_trans,2)
sku_trans <- as.data.frame(table(dat$sku), stringsAsFactors = F)
names(sku_trans) <- c('sku','count_of_trans')
sku_switch <- as.data.frame(table(dat$sku,dat$switch), stringsAsFactors = F)
View(sku_trans)
sku_switch <- as.data.frame(table(dat$sku,dat$comp_previous), stringsAsFactors = F)
sku_switch <- sku_switch[sku_switch$Var2==TRUE,]
names(sku_switch) <- c('sku','switched','count_of_times')
total_switching <- join_all(list(sku_trans,sku_switch), by = 'sku', type = 'inner', match = 'all')
total_switching$switching_percent <- total_switching$count_of_times/total_switching$count_of_trans
View(total_switching)
switching_pairs <- join_all(list(switching_pairs,segment1), by = 'sku1', type = 'inner', match = 'all')
switching_pairs <- join_all(list(switching_pairs,segment2), by = 'sku2', type = 'inner', match = 'all')
switch_from <- as.data.frame(table(switching_pairs$sku1),stringsAsFactors = F)
names(switch_from) <- c('sku','count')
switch_from <- join_all(list(switch_from, sku_trans), by = 'sku', type = 'inner', match = 'all')
switch_from$switching_fraction_from <- round(switch_from$count/switch_from$count_of_trans,2)
## to
switch_to <- as.data.frame(table(switching_pairs$sku2), stringsAsFactors = F)
names(switch_to) <- c('sku','count')
switch_to <- join_all(list(switch_to, sku_trans), by = 'sku', type = 'inner', match = 'all')
switch_to$switching_fraction_to <- round(switch_to$count/switch_to$count_of_trans,2)
#--------------------------------------------------------------------------------------------------------------
# switching fraction to and from
#--------------------------------------------------------------------------------------------------------------
switching_fraction_from_to <- join_all(list(switch_from,switch_to), by = 'sku',type = 'full', match = 'all')
View(switching_fraction_from_to)
christmas <- function(you, merry = c(T,F)){
if(merry == T){
print('Merry Christmas', you)
}else{
print('Try anyway !')
}
}
christmas('Clemence', merry = T)
christmas <- function(you){
print('Merry Christmas', you)
}
christmas <- function(you){
print('Merry Christmas', you)
}
christmas('Clemence')
print(paste('Merry Christmas', you, sep =' '))
christmas <- function(you){
print(paste('Merry Christmas', you, sep =' '))
}
christmas('Clemence')
library(readxl)
library(plyr)
detail <- read.csv('sku_details.csv', header = T, sep= ',')
carcase <- read_excel('carcase_data.xlsx')
setwd('C:/Users/Clemence.Burnichon/Documents/AGRICULTURE/CHICKEN SPRINT/data')
library(readxl)
library(plyr)
detail <- read.csv('sku_details.csv', header = T, sep= ',')
carcase <- read_excel('carcase_data.xlsx')
View(carcase)
View(carcase)
carcase <- read.csv('carcase.csv', header = T, sep=',')
View(carcase)
dat <- join_all(list(detail,carcase), by = 'SKU', type = 'inner', match = 'all')
View(dat)
shiny::runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/Pointer')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
library(highcharter)
library(shinyjs)
library(shinythemes)
library(shinydashboard)
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
runApp('C:/Users/Clemence.Burnichon/Documents/code_repo/facebookapp/facebook_app')
load('auth')
setwd('C://Users//Clemence.Burnichon//Documents//code_repo//facebookapp')
load('auth')
search_page_with_string <- searchPages('airlines', token = auth , n = 100)
library(Rfacebook)
library(httr)
search_page_with_string <- searchPages('airlines', token = auth , n = 100)
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
runApp('facebook_app')
